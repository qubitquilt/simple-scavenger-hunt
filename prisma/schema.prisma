// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_DATABASE_URL")
}

model User {
  id        String     @id @default(uuid()) @db.Uuid
  firstName String     @map("first_name")
  lastName  String     @map("last_name")
  createdAt DateTime   @default(now()) @map("created_at")
  progress  Progress[]

  @@map("users")
}

model Event {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  slug        String     @unique @default("default-slug")
  description String?
  date        DateTime   @default("2025-10-14T00:00:00Z") @map("date")
  createdAt   DateTime   @default(now()) @map("created_at")
  questions   Question[]
  progress    Progress[]

  @@map("events")
}

model Question {
  id             String       @id @default(uuid()) @db.Uuid
  eventId        String @db.Uuid @map("event_id")
  type           QuestionType @map("type")
  content        String
  options        Json?
  expectedAnswer String?      @map("expected_answer")
  aiThreshold    Int          @default(8) @map("ai_threshold")
  hintEnabled    Boolean      @default(false) @map("hint_enabled")

  imageDescription String?     @map("image_description")
  minResolution    Json?       @map("min_resolution")
  allowedFormats   Json?       @map("allowed_formats")
  maxFileSize      Int?        @map("max_file_size")

  slug            String       @unique @default("default-slug")

  createdAt      DateTime     @default(now()) @map("created_at")
  event          Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answers        Answer[]

  @@map("questions")
}

model Progress {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String @db.Uuid @map("user_id")
  eventId       String @db.Uuid @map("event_id")
  questionOrder Json     @map("question_order")
  completed     Boolean  @default(false)
  createdAt     DateTime @default(now()) @map("created_at")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event         Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answers       Answer[]

  @@unique([userId, eventId])
  @@map("progress")
}

model Answer {
  id         String       @id @default(uuid()) @db.Uuid
  progressId String @db.Uuid @map("progress_id")
  questionId String @db.Uuid @map("question_id")
  submission Json?
  aiScore    Int? @map("ai_score")
  status     AnswerStatus @default(pending)
  createdAt  DateTime     @default(now()) @map("created_at")
  progress   Progress     @relation(fields: [progressId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

enum QuestionType {
  text
  multiple_choice
  image
}

enum AnswerStatus {
  pending
  correct
  incorrect
}

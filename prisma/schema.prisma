// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  createdAt DateTime @default(now()) @map("created_at")
  progress  Progress[]

  @@map("users")
}

model Event {
  id          String      @id @default(uuid()) @db.Uuid
  title       String
  slug        String      @unique @default("default-slug")
  description String?
  date        DateTime    @default("2025-10-14T00:00:00Z") @map("date")
  createdAt   DateTime    @default(now()) @map("created_at")
  questions   Question[]
  progress    Progress[]

  @@map("events")
}

model Question {
  id              String   @id @default(uuid()) @db.Uuid
  eventId         String
  type            QuestionType @map("type")
  content         String
  options         Json?
  expectedAnswer  String?  @map("expected_answer")
  aiThreshold     Int      @default(8) @map("ai_threshold")
  createdAt       DateTime @default(now()) @map("created_at")
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answers         Answer[]

  @@map("questions")
}

model Progress {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String
  eventId      String
  questionOrder Json    @map("question_order")
  completed    Boolean  @default(false)
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answers      Answer[]

  @@unique([userId, eventId])
  @@map("progress")
}

model Answer {
  id        String       @id @default(uuid()) @db.Uuid
  progressId String
  questionId String
  submission Json?
  aiScore   Int?
  status    AnswerStatus @default(pending)
  createdAt DateTime     @default(now()) @map("created_at")
  progress  Progress     @relation(fields: [progressId], references: [id], onDelete: Cascade)
  question  Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("answers")
}

enum QuestionType {
  text
  multiple_choice
  image
}

enum AnswerStatus {
  pending
  correct
  incorrect
}
